# Generated by Django 2.1.5 on 2019-02-10 15:31

import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import lego.apps.notifications.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("meetings", "0006_auto_20171210_1610"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("events", "0019_auto_20181107_2139"),
        ("users", "0020_abakusgroup_show_badge"),
    ]

    operations = [
        migrations.CreateModel(
            name="Announcement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "deleted",
                    models.BooleanField(db_index=True, default=False, editable=False),
                ),
                ("message", models.TextField()),
                ("sent", models.DateTimeField(default=None, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        default=None,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="announcement_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("events", models.ManyToManyField(blank=True, to="events.Event")),
                (
                    "from_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="from_group",
                        to="users.AbakusGroup",
                    ),
                ),
                ("groups", models.ManyToManyField(blank=True, to="users.AbakusGroup")),
                ("meetings", models.ManyToManyField(blank=True, to="meetings.Meeting")),
                (
                    "updated_by",
                    models.ForeignKey(
                        default=None,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="announcement_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "users",
                    models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={"abstract": False, "default_manager_name": "objects"},
        ),
        migrations.CreateModel(
            name="NotificationSetting",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("weekly_mail", "weekly_mail"),
                            ("event_bump", "event_bump"),
                            ("event_admin_registration", "event_admin_registration"),
                            (
                                "event_admin_unregistration",
                                "event_admin_unregistration",
                            ),
                            ("event_payment_overdue", "event_payment_overdue"),
                            (
                                "event_payment_overdue_creator",
                                "event_payment_overdue_creator",
                            ),
                            ("meeting_invite", "meeting_invite"),
                            ("penalty_creation", "penalty_creation"),
                            ("restricted_mail_sent", "restricted_mail_sent"),
                            ("company_interest_created", "company_interest_created"),
                            ("comment", "comment"),
                            ("comment_reply", "comment_reply"),
                            ("announcement", "announcement"),
                            ("survey_created", "survey_created"),
                        ],
                        max_length=64,
                    ),
                ),
                ("enabled", models.BooleanField(default=True)),
                (
                    "channels",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[("email", "email"), ("push", "push")],
                            max_length=64,
                        ),
                        default=lego.apps.notifications.models._default_channels,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AlterUniqueTogether(
            name="notificationsetting", unique_together={("user", "notification_type")}
        ),
    ]
